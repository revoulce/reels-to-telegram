#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');
const readline = require('readline');

const execAsync = promisify(exec);

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const question = (query) => new Promise(resolve => rl.question(query, resolve));

console.log('üöÄ Reels to Telegram Server Setup v3.0 (Memory Edition)\n');

async function checkDependencies() {
    console.log('üìã Checking dependencies...\n');

    try {
        // Check Node.js version
        const nodeVersion = process.version;
        console.log(`‚úÖ Node.js: ${nodeVersion}`);

        // Check yt-dlp
        try {
            const { stdout } = await execAsync('yt-dlp --version');
            console.log(`‚úÖ yt-dlp: ${stdout.trim()}`);
        } catch (error) {
            console.log('‚ùå yt-dlp not found');
            console.log('üí° Install with: pip install yt-dlp');
            console.log('   or: brew install yt-dlp (macOS)');
            console.log('   or: sudo apt install yt-dlp (Ubuntu/Debian)\n');
        }

        // Check Python (for yt-dlp)
        try {
            const { stdout } = await execAsync('python3 --version');
            console.log(`‚úÖ Python: ${stdout.trim()}`);
        } catch (error) {
            try {
                const { stdout } = await execAsync('python --version');
                console.log(`‚úÖ Python: ${stdout.trim()}`);
            } catch (error2) {
                console.log('‚ö†Ô∏è  Python not found (required for yt-dlp)');
            }
        }

        // Check available RAM
        try {
            const totalMem = require('os').totalmem();
            const freeMem = require('os').freemem();
            console.log(`üíæ System RAM: ${formatMemory(totalMem)} total, ${formatMemory(freeMem)} free`);

            if (freeMem < 512 * 1024 * 1024) { // Less than 512MB free
                console.log('‚ö†Ô∏è  Warning: Low available memory. Consider reducing concurrent downloads.');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è  Could not check system memory');
        }

    } catch (error) {
        console.error('Error checking dependencies:', error.message);
    }

    console.log('');
}

function formatMemory(bytes) {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function generateApiKey() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < 64; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
}

async function configureMemorySettings() {
    console.log('üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–º—è—Ç–∏...\n');

    // Memory per video
    const memoryPerVideoInput = await question('üìπ –ú–∞–∫—Å–∏–º—É–º –ø–∞–º—è—Ç–∏ –Ω–∞ –æ–¥–Ω–æ –≤–∏–¥–µ–æ (MB, default: 50): ') || '50';
    const memoryPerVideo = parseInt(memoryPerVideoInput) * 1024 * 1024;

    // Concurrent downloads
    const concurrentInput = await question('üîÑ –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ (default: 3): ') || '3';
    const concurrent = parseInt(concurrentInput);

    // Calculate recommended total memory
    const recommendedTotal = memoryPerVideo * concurrent * 1.5; // 50% buffer
    const recommendedTotalMB = Math.ceil(recommendedTotal / 1024 / 1024);

    console.log(`\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –æ–±—â–∞—è –ø–∞–º—è—Ç—å: ${recommendedTotalMB}MB (${memoryPerVideoInput}MB √ó ${concurrent} √ó 1.5)`);

    const totalMemoryInput = await question(`üìä –û–±—â–∏–π –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ (MB, default: ${recommendedTotalMB}): `) || recommendedTotalMB.toString();
    const totalMemory = parseInt(totalMemoryInput) * 1024 * 1024;

    // Validation
    if (totalMemory < memoryPerVideo * concurrent) {
        console.log('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ–±—â–∏–π –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ –º–µ–Ω—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ –¥–ª—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤');
        const shouldContinue = await question('   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ');
        if (shouldContinue.toLowerCase() !== 'y') {
            console.log('‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
            process.exit(1);
        }
    }

    return {
        memoryPerVideo,
        totalMemory,
        concurrent
    };
}

async function createEnvFile() {
    console.log('‚öôÔ∏è  Setting up environment configuration...\n');

    if (fs.existsSync('.env')) {
        const overwrite = await question('üìÑ .env file already exists. Overwrite? (y/N): ');
        if (overwrite.toLowerCase() !== 'y') {
            console.log('‚úÖ Keeping existing .env file');
            return;
        }
    }

    console.log('üìù Please provide the following information:\n');

    // Port
    const port = await question('üåê Server port (default: 3000): ') || '3000';

    // Bot token
    const botToken = await question('ü§ñ Telegram bot token: ');
    if (!botToken) {
        console.log('‚ùå Bot token is required!');
        console.log('üí° Create a bot: https://t.me/botfather');
        process.exit(1);
    }

    // Channel ID
    const channelId = await question('üì¢ Telegram channel ID (e.g., @mychannel): ');
    if (!channelId) {
        console.log('‚ùå Channel ID is required!');
        process.exit(1);
    }

    // API key
    const useGeneratedKey = await question('üîë Generate random API key? (Y/n): ');
    let apiKey;

    if (useGeneratedKey.toLowerCase() === 'n') {
        apiKey = await question('üîë Enter your API key (min 32 chars): ');
        if (apiKey.length < 32) {
            console.log('‚ùå API key must be at least 32 characters');
            process.exit(1);
        }
    } else {
        apiKey = generateApiKey();
        console.log(`üîë Generated API key: ${apiKey}`);
    }

    // Memory configuration
    const memoryConfig = await configureMemorySettings();

    // Queue size
    const queueSize = await question('üìã –ú–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏ (default: 50): ') || '50';

    // Environment
    const nodeEnv = await question('üè∑Ô∏è  Environment (development/production, default: production): ') || 'production';

    // Debug options
    const debugMemory = await question('üîç –í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏? (y/N): ');

    // Create .env content
    const envContent = `# Reels to Telegram Server Configuration (Memory Edition)
# Generated on ${new Date().toISOString()}

# Server Configuration
PORT=${port}
NODE_ENV=${nodeEnv}

# Telegram Bot Configuration
BOT_TOKEN=${botToken}
CHANNEL_ID=${channelId}

# Security
API_KEY=${apiKey}

# File Settings
MAX_FILE_SIZE=${memoryConfig.memoryPerVideo}

# Memory Configuration (NEW!)
MAX_MEMORY_PER_VIDEO=${memoryConfig.memoryPerVideo}
MAX_TOTAL_MEMORY=${memoryConfig.totalMemory}
MEMORY_PROCESSING=true

# Queue Configuration
MAX_CONCURRENT_DOWNLOADS=${memoryConfig.concurrent}
MAX_QUEUE_SIZE=${queueSize}
QUEUE_TIMEOUT=600000
DOWNLOAD_TIMEOUT=60000

# Memory Monitoring
MEMORY_LOG_INTERVAL=30000
AUTO_MEMORY_CLEANUP=true
MEMORY_WARNING_THRESHOLD=80
DEBUG_MEMORY=${debugMemory.toLowerCase() === 'y' ? 'true' : 'false'}

# Performance
WORKER_SPAWN_DELAY=1000
QUEUE_POLL_INTERVAL=2000
AUTO_CLEANUP_INTERVAL=300000
`;

    fs.writeFileSync('.env', envContent);
    console.log('\n‚úÖ .env file created successfully!');

    // Show memory summary
    console.log('\nüíæ Memory Configuration Summary:');
    console.log(`   Per video: ${formatMemory(memoryConfig.memoryPerVideo)}`);
    console.log(`   Total pool: ${formatMemory(memoryConfig.totalMemory)}`);
    console.log(`   Concurrent: ${memoryConfig.concurrent} videos`);
    console.log(`   Mode: In-memory processing (zero disk usage)`);
}

function createDirectories() {
    console.log('\nüìÅ Creating directories...');

    // –í memory —Ä–µ–∂–∏–º–µ temp –ø–∞–ø–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, –Ω–æ —Å–æ–∑–¥–∞–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const dirs = ['logs'];

    dirs.forEach(dir => {
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
            console.log(`‚úÖ Created: ${dir}/`);
        } else {
            console.log(`‚úÖ Exists: ${dir}/`);
        }
    });

    // Create temp dir but note it won't be used
    if (!fs.existsSync('temp')) {
        fs.mkdirSync('temp', { recursive: true });
        console.log(`‚úÖ Created: temp/ (not used in memory mode)`);
    } else {
        console.log(`‚úÖ Exists: temp/ (not used in memory mode)`);
    }
}

function createCookiesFile() {
    console.log('\nüç™ Setting up cookies file...');

    if (!fs.existsSync('cookies.txt')) {
        fs.writeFileSync('cookies.txt', '# Instagram cookies for yt-dlp\n# Add your cookies here if needed\n');
        console.log('‚úÖ Created empty cookies.txt');
        console.log('üí° Add Instagram cookies if you encounter rate limits');
    } else {
        console.log('‚úÖ cookies.txt already exists');
    }
}

async function testSetup() {
    console.log('\nüß™ Testing setup...\n');

    try {
        // Test environment loading
        require('dotenv').config();

        if (!process.env.BOT_TOKEN) {
            throw new Error('BOT_TOKEN not loaded from .env');
        }

        console.log('‚úÖ Environment variables loaded');

        // Test memory configuration
        const memoryPerVideo = parseInt(process.env.MAX_MEMORY_PER_VIDEO || '52428800');
        const totalMemory = parseInt(process.env.MAX_TOTAL_MEMORY || '209715200');
        const concurrent = parseInt(process.env.MAX_CONCURRENT_DOWNLOADS || '3');

        console.log(`‚úÖ Memory config: ${formatMemory(memoryPerVideo)} per video, ${formatMemory(totalMemory)} total`);

        if (totalMemory < memoryPerVideo * concurrent) {
            console.log('‚ö†Ô∏è  Warning: Total memory limit may be insufficient');
        }

        // Test Telegram bot
        const { Telegraf } = require('telegraf');
        const bot = new Telegraf(process.env.BOT_TOKEN);

        try {
            const botInfo = await bot.telegram.getMe();
            console.log(`‚úÖ Telegram bot connected: @${botInfo.username}`);
        } catch (error) {
            console.log('‚ùå Telegram bot connection failed:', error.message);
        }

        // Test system memory
        const systemMem = require('os').totalmem();
        const freeMem = require('os').freemem();

        if (freeMem < totalMemory) {
            console.log(`‚ö†Ô∏è  Warning: System free memory (${formatMemory(freeMem)}) < configured limit (${formatMemory(totalMemory)})`);
        } else {
            console.log(`‚úÖ System memory check passed (${formatMemory(freeMem)} available)`);
        }

        console.log('‚úÖ Setup test completed');

    } catch (error) {
        console.log('‚ùå Setup test failed:', error.message);
    }
}

function showNextSteps() {
    console.log('\nüéâ Setup completed! (Memory Edition)\n');
    console.log('üìã Next steps:');
    console.log('1. npm start                     - Start the server in memory mode');
    console.log('2. Install browser extension     - Load extension in Chrome');
    console.log('3. Configure extension           - Add server URL and API key');
    console.log('4. Test with Instagram Reels     - Send a video!');
    console.log('\nüìñ Documentation: https://github.com/revoulce/reels-to-telegram');
    console.log('\nüîß Server commands:');
    console.log('   npm start     - Production mode (memory processing)');
    console.log('   npm run dev   - Development mode (with memory logs)');
    console.log('   npm run clean - Clean logs (temp not used)');
    console.log('\nüíæ Memory mode features:');
    console.log('   ‚úÖ Zero disk usage');
    console.log('   ‚ö° Faster processing');
    console.log('   üßπ Automatic memory cleanup');
    console.log('   üìä Memory usage monitoring');
    console.log('\nüîß Telegram bot commands:');
    console.log('   /queue   - Queue status');
    console.log('   /memory  - Memory usage');
    console.log('   /stats   - General statistics');
    console.log('\n‚ú® Happy posting with zero disk usage!');
}

async function main() {
    try {
        await checkDependencies();
        await createEnvFile();
        createDirectories();
        createCookiesFile();
        await testSetup();
        showNextSteps();

    } catch (error) {
        console.error('\n‚ùå Setup failed:', error.message);
        process.exit(1);
    } finally {
        rl.close();
    }
}

// Handle Ctrl+C
process.on('SIGINT', () => {
    console.log('\n\nüëã Setup cancelled');
    rl.close();
    process.exit(0);
});

main();