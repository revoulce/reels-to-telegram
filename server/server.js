const express = require('express');
const cors = require('cors');
const fs = require('fs');
const path = require('path');
const {Telegraf} = require('telegraf');
const {v4: uuidv4} = require('uuid');
const {exec} = require('child_process');
const {promisify} = require('util');
const EventEmitter = require('events');

const execAsync = promisify(exec);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
    PORT: process.env.PORT || 3000,
    BOT_TOKEN: process.env.BOT_TOKEN || 'YOUR_BOT_TOKEN',
    CHANNEL_ID: process.env.CHANNEL_ID || '@your_channel',
    API_KEY: process.env.API_KEY || 'your-secret-api-key',
    TEMP_DIR: './temp',
    MAX_FILE_SIZE: 50 * 1024 * 1024, // 50MB
    DOWNLOAD_TIMEOUT: 60000, // 60 seconds
    SUPPORTED_DOMAINS: ['instagram.com', 'www.instagram.com'],
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–µ—Ä–µ–¥–∏
    MAX_CONCURRENT_DOWNLOADS: 3, // –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
    MAX_QUEUE_SIZE: 50, // –ú–∞–∫—Å–∏–º—É–º –≤–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥–∏
    QUEUE_TIMEOUT: 10 * 60 * 1000 // 10 –º–∏–Ω—É—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
};

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
if (!fs.existsSync(config.TEMP_DIR)) {
    fs.mkdirSync(config.TEMP_DIR, { recursive: true });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const app = express();
const bot = new Telegraf(config.BOT_TOKEN);

// –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–µ–π
class VideoQueue extends EventEmitter {
    constructor() {
        super();
        this.queue = new Map(); // jobId -> jobData
        this.processing = new Map(); // jobId -> processingData
        this.completed = new Map(); // jobId -> result (—Ö—Ä–∞–Ω–∏—Ç—Å—è 1 —á–∞—Å)
        this.failed = new Map(); // jobId -> error (—Ö—Ä–∞–Ω–∏—Ç—Å—è 1 —á–∞—Å)
        this.activeWorkers = 0;

        // –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        setInterval(() => this.cleanupCompletedJobs(), 5 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    }

    // –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
    addJob(videoData, userInfo = {}) {
        if (this.queue.size >= config.MAX_QUEUE_SIZE) {
            throw new Error('Queue is full. Please try again later.');
        }

        const jobId = uuidv4();
        const job = {
            id: jobId,
            videoData,
            userInfo,
            addedAt: new Date(),
            status: 'queued',
            progress: 0
        };

        this.queue.set(jobId, job);
        this.emit('jobAdded', job);

        console.log(`üì• Job ${jobId} added to queue (${this.queue.size} in queue)`);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä—ã
        this.processNext();

        return jobId;
    }

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
    async processNext() {
        if (this.activeWorkers >= config.MAX_CONCURRENT_DOWNLOADS) {
            return; // –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –∑–∞–Ω—è—Ç—ã
        }

        if (this.queue.size === 0) {
            return; // –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
        }

        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        const [jobId, job] = this.queue.entries().next().value;
        this.queue.delete(jobId);

        this.activeWorkers++;
        this.processing.set(jobId, { ...job, status: 'processing', startedAt: new Date() });

        console.log(`üöÄ Processing job ${jobId} (${this.activeWorkers} active workers)`);

        try {
            const result = await this.processJob(job);

            // –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
            this.completed.set(jobId, {
                ...job,
                status: 'completed',
                result,
                completedAt: new Date()
            });

            this.emit('jobCompleted', jobId, result);
            console.log(`‚úÖ Job ${jobId} completed successfully`);

        } catch (error) {
            // –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            this.failed.set(jobId, {
                ...job,
                status: 'failed',
                error: error.message,
                failedAt: new Date()
            });

            this.emit('jobFailed', jobId, error);
            console.error(`‚ùå Job ${jobId} failed:`, error.message);
        } finally {
            this.processing.delete(jobId);
            this.activeWorkers--;

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
            setImmediate(() => this.processNext());
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É
    async processJob(job) {
        const { videoData } = job;
        const { videoUrl, pageUrl } = videoData;

        const tempFileName = `video_${job.id}.mp4`;
        const tempFilePath = path.join(config.TEMP_DIR, tempFileName);

        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            this.updateJobProgress(job.id, 10, 'Extracting metadata...');

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            const metadata = await extractMetadata(pageUrl);

            this.updateJobProgress(job.id, 30, 'Downloading video...');

            // –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            await downloadVideo(pageUrl, tempFilePath);

            this.updateJobProgress(job.id, 80, 'Sending to Telegram...');

            // –°–æ–∑–¥–∞–µ–º caption –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            const caption = createCaption(metadata, pageUrl);

            const message = await bot.telegram.sendVideo(
                config.CHANNEL_ID,
                { source: tempFilePath },
                {
                    caption,
                    parse_mode: 'HTML',
                    disable_notification: false
                }
            );

            this.updateJobProgress(job.id, 100, 'Completed');

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if (fs.existsSync(tempFilePath)) {
                fs.unlinkSync(tempFilePath);
            }

            return {
                success: true,
                message: 'Video sent to Telegram successfully',
                metadata: {
                    author: metadata.author || 'Unknown',
                    title: metadata.title || 'Instagram Video',
                    views: metadata.view_count,
                    likes: metadata.like_count,
                    duration: metadata.duration
                },
                telegramMessageId: message.message_id
            };

        } catch (error) {
            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if (fs.existsSync(tempFilePath)) {
                fs.unlinkSync(tempFilePath);
            }
            throw error;
        }
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏
    updateJobProgress(jobId, progress, message) {
        const job = this.processing.get(jobId);
        if (job) {
            job.progress = progress;
            job.progressMessage = message;
            this.emit('jobProgress', jobId, progress, message);
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    getJobStatus(jobId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
        if (this.queue.has(jobId)) {
            return { status: 'queued', ...this.queue.get(jobId) };
        }

        if (this.processing.has(jobId)) {
            return { status: 'processing', ...this.processing.get(jobId) };
        }

        if (this.completed.has(jobId)) {
            return { status: 'completed', ...this.completed.get(jobId) };
        }

        if (this.failed.has(jobId)) {
            return { status: 'failed', ...this.failed.get(jobId) };
        }

        return null; // –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏
    getQueueStats() {
        return {
            queued: this.queue.size,
            processing: this.processing.size,
            activeWorkers: this.activeWorkers,
            maxWorkers: config.MAX_CONCURRENT_DOWNLOADS,
            completed: this.completed.size,
            failed: this.failed.size,
            maxQueueSize: config.MAX_QUEUE_SIZE
        };
    }

    // –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    cleanupCompletedJobs() {
        const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);

        let cleaned = 0;

        // –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
        for (const [jobId, job] of this.completed.entries()) {
            if (job.completedAt < oneHourAgo) {
                this.completed.delete(jobId);
                cleaned++;
            }
        }

        // –û—á–∏—Å—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö
        for (const [jobId, job] of this.failed.entries()) {
            if (job.failedAt < oneHourAgo) {
                this.failed.delete(jobId);
                cleaned++;
            }
        }

        if (cleaned > 0) {
            console.log(`üßπ Cleaned ${cleaned} old job records`);
        }
    }

    // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏)
    cancelJob(jobId) {
        if (this.queue.has(jobId)) {
            this.queue.delete(jobId);
            console.log(`‚ùå Job ${jobId} cancelled`);
            return true;
        }
        return false;
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—á–µ—Ä–µ–¥–∏
const videoQueue = new VideoQueue();

// –°–æ–±—ã—Ç–∏—è –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
videoQueue.on('jobCompleted', (jobId, result) => {
    console.log(`üì§ Job ${jobId} sent to Telegram:`, result.metadata?.title || 'Video');
});

videoQueue.on('jobFailed', (jobId, error) => {
    console.log(`üí• Job ${jobId} processing failed:`, error.message);
});

// Middleware
app.use(cors({
    origin: [
        'https://www.instagram.com',
        'chrome-extension://*'
    ],
    credentials: true
}));

app.use(express.json({ limit: '10mb' }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.path} - ${req.ip}`);
    next();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
const authenticateApiKey = (req, res, next) => {
    const apiKey = req.headers['x-api-key'];
    if (!apiKey) {
        return res.status(401).json({ error: 'API key required' });
    }
    if (apiKey !== config.API_KEY) {
        return res.status(401).json({ error: 'Invalid API key' });
    }
    next();
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è URL
const validateInstagramUrl = (url) => {
    try {
        const urlObj = new URL(url);
        const isInstagram = config.SUPPORTED_DOMAINS.includes(urlObj.hostname);
        const isValidPath = urlObj.pathname.includes('/reels/') ||
            urlObj.pathname.includes('/reel/') ||
            urlObj.pathname.includes('/stories/') ||
            urlObj.pathname.includes('/p/');

        return isInstagram && isValidPath;
    } catch {
        return false;
    }
};

// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ (—Ç–µ –∂–µ —á—Ç–æ –∏ —Ä–∞–Ω—å—à–µ)
async function extractMetadata(pageUrl) {
    try {
        console.log('üìä Extracting metadata for:', pageUrl);

        const command = `yt-dlp --dump-json --no-download --quiet "${pageUrl}"`;
        const { stdout } = await execAsync(command, {
            timeout: 30000,
            maxBuffer: 1024 * 1024 * 10
        });

        const metadata = JSON.parse(stdout);

        const result = {
            title: cleanText(metadata.title || metadata.description || ''),
            author: cleanText(metadata.uploader || metadata.channel || ''),
            duration: metadata.duration || 0,
            view_count: metadata.view_count || 0,
            like_count: metadata.like_count || 0,
            upload_date: metadata.upload_date || null,
            thumbnail: metadata.thumbnail || null
        };

        console.log('‚úÖ Metadata extracted:', {
            author: result.author || 'Unknown',
            titleLength: result.title.length,
            duration: result.duration,
            views: result.view_count
        });

        return result;
    } catch (error) {
        console.warn('‚ö†Ô∏è Could not extract metadata:', error.message);
        return {
            title: '',
            author: '',
            duration: 0,
            view_count: 0,
            like_count: 0
        };
    }
}

function cleanText(text) {
    if (!text) return '';
    return text
        .replace(/[\u{1F600}-\u{1F64F}]/gu, '')
        .replace(/\s+/g, ' ')
        .trim()
        .substring(0, 200);
}

async function downloadVideo(pageUrl, outputPath) {
    console.log('üì• Starting download from:', pageUrl);

    const command = `yt-dlp --cookies "cookies.txt" -f "best[ext=mp4]/best" -o "${outputPath}" "${pageUrl}" --no-playlist --max-filesize ${config.MAX_FILE_SIZE}`;

    try {
        const { stdout, stderr } = await execAsync(command, {
            timeout: config.DOWNLOAD_TIMEOUT,
            maxBuffer: 1024 * 1024 * 50
        });

        if (stderr) {
            console.log('yt-dlp warnings:', stderr);
        }

        if (fs.existsSync(outputPath)) {
            const stats = fs.statSync(outputPath);
            if (stats.size > 0) {
                console.log(`‚úÖ Download successful: ${formatFileSize(stats.size)}`);
                return outputPath;
            }
        }

        throw new Error('Downloaded file is empty or missing');
    } catch (error) {
        console.error('‚ùå Download failed:', error.message);

        if (fs.existsSync(outputPath)) {
            fs.unlinkSync(outputPath);
        }

        throw error;
    }
}

function formatNumber(num) {
    if (!num || num === 0) return '';

    if (num >= 1000000) {
        return (num / 1000000).toFixed(1) + 'M';
    } else if (num >= 1000) {
        return (num / 1000).toFixed(1) + 'K';
    }

    return num.toLocaleString();
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function createCaption(metadata, pageUrl) {
    let caption = '';

    if (metadata.title) {
        caption += `üé¨ ${metadata.title}\n\n`;
    }

    if (metadata.author) {
        caption += `üë§ ${metadata.author}\n`;
    }

    if (metadata.view_count > 0) {
        caption += `üëÅ ${formatNumber(metadata.view_count)} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n`;
    }

    if (metadata.like_count > 0) {
        caption += `‚ù§Ô∏è ${formatNumber(metadata.like_count)} –ª–∞–π–∫–æ–≤\n`;
    }

    if (metadata.duration > 0) {
        const minutes = Math.floor(metadata.duration / 60);
        const seconds = metadata.duration % 60;
        caption += `‚è± ${minutes}:${seconds.toString().padStart(2, '0')}\n`;
    }

    caption += `\nüîó ${pageUrl}`;

    return caption.substring(0, 1024);
}

function cleanupOldFiles() {
    const maxAge = 60 * 60 * 1000;
    const now = Date.now();

    try {
        const files = fs.readdirSync(config.TEMP_DIR);
        let cleaned = 0;

        files.forEach(file => {
            const filePath = path.join(config.TEMP_DIR, file);
            const stats = fs.statSync(filePath);

            if (now - stats.mtime.getTime() > maxAge) {
                fs.unlinkSync(filePath);
                cleaned++;
            }
        });

        if (cleaned > 0) {
            console.log(`üßπ Cleaned ${cleaned} old files`);
        }
    } catch (error) {
        console.error('Error cleaning old files:', error);
    }
}

// === API ENDPOINTS ===

// Health check endpoints
app.get('/health', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        queue: videoQueue.getQueueStats()
    });
});

app.get('/api/health', (req, res) => {
    res.json({
        status: 'OK',
        version: '2.1.0',
        timestamp: new Date().toISOString(),
        queue: videoQueue.getQueueStats()
    });
});

// –û—Å–Ω–æ–≤–Ω–æ–π endpoint - —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –æ—á–µ—Ä–µ–¥—å
app.post('/api/download-video', authenticateApiKey, async (req, res) => {
    const { videoUrl, pageUrl, timestamp } = req.body;

    console.log('\nüöÄ New video request:', {
        pageUrl,
        hasVideoUrl: !!videoUrl,
        timestamp
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!pageUrl) {
        return res.status(400).json({ error: 'pageUrl is required' });
    }

    if (!validateInstagramUrl(pageUrl)) {
        return res.status(400).json({ error: 'Invalid Instagram URL' });
    }

    try {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        const jobId = videoQueue.addJob(
            { videoUrl, pageUrl, timestamp },
            { ip: req.ip, userAgent: req.get('User-Agent') }
        );

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –∑–∞–¥–∞—á–∏
        res.json({
            success: true,
            jobId,
            message: 'Video added to processing queue',
            queuePosition: videoQueue.getQueueStats().queued,
            estimatedWaitTime: Math.ceil(videoQueue.getQueueStats().queued / config.MAX_CONCURRENT_DOWNLOADS) * 30 // –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        });

    } catch (error) {
        console.error('‚ùå Error adding to queue:', error.message);

        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
app.get('/api/job/:jobId', authenticateApiKey, (req, res) => {
    const { jobId } = req.params;

    const jobStatus = videoQueue.getJobStatus(jobId);

    if (!jobStatus) {
        return res.status(404).json({ error: 'Job not found' });
    }

    // –°–∫—Ä—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
    const response = {
        jobId,
        status: jobStatus.status,
        progress: jobStatus.progress || 0,
        progressMessage: jobStatus.progressMessage,
        addedAt: jobStatus.addedAt,
        startedAt: jobStatus.startedAt,
        completedAt: jobStatus.completedAt,
        failedAt: jobStatus.failedAt
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
    if (jobStatus.status === 'completed') {
        response.result = jobStatus.result;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ
    if (jobStatus.status === 'failed') {
        response.error = jobStatus.error;
    }

    res.json(response);
});

// –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏
app.delete('/api/job/:jobId', authenticateApiKey, (req, res) => {
    const { jobId } = req.params;

    const cancelled = videoQueue.cancelJob(jobId);

    if (cancelled) {
        res.json({ success: true, message: 'Job cancelled' });
    } else {
        res.status(400).json({ error: 'Job cannot be cancelled (not in queue or already processing)' });
    }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏
app.get('/api/queue/stats', authenticateApiKey, (req, res) => {
    const stats = videoQueue.getQueueStats();

    res.json({
        ...stats,
        config: {
            maxConcurrentDownloads: config.MAX_CONCURRENT_DOWNLOADS,
            maxQueueSize: config.MAX_QUEUE_SIZE,
            queueTimeout: config.QUEUE_TIMEOUT / 1000 / 60 // –≤ –º–∏–Ω—É—Ç–∞—Ö
        }
    });
});

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á (–¥–ª—è –∞–¥–º–∏–Ω–∞)
app.get('/api/queue/jobs', authenticateApiKey, (req, res) => {
    const jobs = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    for (const [id, job] of videoQueue.queue.entries()) {
        jobs.push({ ...job, status: 'queued' });
    }

    for (const [id, job] of videoQueue.processing.entries()) {
        jobs.push({ ...job, status: 'processing' });
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
    const completed = Array.from(videoQueue.completed.values()).slice(-20);
    const failed = Array.from(videoQueue.failed.values()).slice(-20);

    jobs.push(...completed, ...failed);

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    jobs.sort((a, b) => new Date(b.addedAt) - new Date(a.addedAt));

    res.json(jobs.slice(0, 100)); // –ú–∞–∫—Å–∏–º—É–º 100 –∑–∞–¥–∞—á
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/stats', authenticateApiKey, (req, res) => {
    const tempFiles = fs.readdirSync(config.TEMP_DIR).length;

    res.json({
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        tempFiles,
        queue: videoQueue.getQueueStats(),
        config: {
            maxFileSize: formatFileSize(config.MAX_FILE_SIZE),
            downloadTimeout: config.DOWNLOAD_TIMEOUT / 1000 + 's',
            maxConcurrentDownloads: config.MAX_CONCURRENT_DOWNLOADS,
            maxQueueSize: config.MAX_QUEUE_SIZE
        }
    });
});

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)
bot.command('start', (ctx) => {
    ctx.reply(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ Instagram Reels.\n\n' +
        'üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ –∫–∞–Ω–∞–ª.\n\n' +
        '‚ö° –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n' +
        '‚Ä¢ –û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ\n' +
        '‚Ä¢ –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ 3 –≤–∏–¥–µ–æ\n' +
        '‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞\n\n' +
        'üìä –ö–æ–º–∞–Ω–¥—ã:\n' +
        '/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n' +
        '/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã\n' +
        '/queue - —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏'
    );
});

bot.command('queue', async (ctx) => {
    const stats = videoQueue.getQueueStats();

    ctx.reply(
        `üìä –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏:\n\n` +
        `‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: ${stats.queued}\n` +
        `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: ${stats.processing}\n` +
        `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.completed}\n` +
        `‚ùå –û—à–∏–±–∫–∏: ${stats.failed}\n` +
        `üë∑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤: ${stats.activeWorkers}/${stats.maxWorkers}\n\n` +
        `üìà –ú–∞–∫—Å–∏–º—É–º –≤ –æ—á–µ—Ä–µ–¥–∏: ${stats.maxQueueSize}`
    );
});

bot.command('stats', async (ctx) => {
    const uptime = Math.floor(process.uptime());
    const hours = Math.floor(uptime / 3600);
    const minutes = Math.floor((uptime % 3600) / 60);
    const queueStats = videoQueue.getQueueStats();

    ctx.reply(
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:\n\n` +
        `‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${hours}—á ${minutes}–º\n` +
        `üíæ –ü–∞–º—è—Ç—å: ${Math.round(process.memoryUsage().rss / 1024 / 1024)}MB\n` +
        `üìÅ –í—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${fs.readdirSync(config.TEMP_DIR).length}\n` +
        `üîÑ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n\n` +
        `üìä –û—á–µ—Ä–µ–¥—å:\n` +
        `‚Ä¢ –û–∂–∏–¥–∞–µ—Ç: ${queueStats.queued}\n` +
        `‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: ${queueStats.processing}\n` +
        `‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${queueStats.completed}\n` +
        `‚Ä¢ –û—à–∏–±–∫–∏: ${queueStats.failed}`
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
    console.error('Express error:', error);
    res.status(500).json({
        error: 'Internal server error',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
});

// Graceful shutdown
const shutdown = () => {
    console.log('\nüîÑ Shutting down gracefully...');

    // Cleanup temp files
    try {
        const files = fs.readdirSync(config.TEMP_DIR);
        files.forEach(file => {
            fs.unlinkSync(path.join(config.TEMP_DIR, file));
        });
        console.log('üßπ Temporary files cleaned');
    } catch (error) {
        console.error('Error during cleanup:', error);
    }

    // Stop bot
    bot.stop('SIGTERM');
    process.exit(0);
};

process.once('SIGINT', shutdown);
process.once('SIGTERM', shutdown);

// –ó–∞–ø—É—Å–∫
const start = async () => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        await execAsync('yt-dlp --version');
        console.log('‚úÖ yt-dlp found');

        // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        app.listen(config.PORT, () => {
            console.log(`üöÄ Server running on port ${config.PORT}`);
            console.log(`üìÅ Temp directory: ${config.TEMP_DIR}`);
            console.log(`üì∫ Telegram channel: ${config.CHANNEL_ID}`);
            console.log(`‚ö° Queue: max ${config.MAX_CONCURRENT_DOWNLOADS} concurrent, ${config.MAX_QUEUE_SIZE} queue size`);
        });

        // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await bot.launch();
        console.log('ü§ñ Telegram bot started');

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
        setInterval(cleanupOldFiles, 30 * 60 * 1000);

    } catch (error) {
        console.error('‚ùå Failed to start:', error.message);

        if (error.message.includes('yt-dlp')) {
            console.log('\nüí° Install yt-dlp: pip install yt-dlp');
        }

        process.exit(1);
    }
};

start();