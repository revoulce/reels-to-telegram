name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and validate
  lint:
    name: Lint Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install server dependencies
        run: cd server && npm ci

      - name: Run server ESLint
        run: cd server && npm run lint

      - name: Validate extension manifest
        run: |
          cd extension
          if ! jq empty manifest.json; then
            echo "manifest.json is not valid JSON"
            exit 1
          fi

  # Security check
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Check for vulnerabilities
        run: |
          cd server
          echo "Running security audit..."
          npm audit --audit-level=moderate
          
          # Check for outdated packages
          echo "Checking for outdated packages..."
          npm outdated || true  # Don't fail if packages are outdated
          
          # Optional: Check for known vulnerable patterns in code
          echo "Checking for security patterns..."
          ! grep -r "eval(" src/ || echo "WARNING: Found eval() usage"
          ! grep -r "process.env" src/ --exclude=config/* || echo "WARNING: Direct process.env usage outside config"

  # Docker build and test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [lint, security]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.19.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and start services
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHANNEL_ID: ${{ secrets.CHANNEL_ID }}
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          cd server
          docker-compose up -d --build
          
          # Wait for services to be ready
          sleep 10
          
          # Check container status
          docker-compose ps
          
          # Verify container is healthy
          if [ "$(docker-compose ps --status running --services | wc -l)" -eq 0 ]; then
            echo "Container is not running!"
            docker-compose logs
            exit 1
          fi
          
          # Test API health endpoint
          HEALTH_RESPONSE=$(curl -s -H "X-API-Key: test-api-key-32-characters-long-abc" \
                          http://localhost:3000/api/health)
          
          if ! echo "$HEALTH_RESPONSE" | grep -q '"status":"OK"'; then
            echo "Health check failed!"
            echo "Response: $HEALTH_RESPONSE"
            docker-compose logs
            exit 1
          fi
          
          # Test API queue stats endpoint
          STATS_RESPONSE=$(curl -s -H "X-API-Key: test-api-key-32-characters-long-abc" \
                         http://localhost:3000/api/queue/stats)
          
          if [ $? -ne 0 ]; then
            echo "Queue stats check failed!"
            echo "Response: $STATS_RESPONSE"
            docker-compose logs
            exit 1
          fi

  # Notifications
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [lint, security, docker]
    if: always()

    steps:
      - name: Notify on Telegram
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          # Set status emoji
          if [[ "${{ needs.docker.result }}" == "success" ]]; then
            STATUS="✅ Success"
          else
            STATUS="❌ Failure"
          fi
          
          # Send notification
          curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage \
            -d chat_id=${TELEGRAM_CHAT_ID} \
            -d parse_mode="HTML" \
            -d text="<b>Build Status: ${STATUS}</b>%0A%0ARepository: ${{ github.repository }}%0ABranch: ${GITHUB_REF#refs/heads/}%0ACommit: ${GITHUB_SHA::7}%0AAuthor: ${{ github.actor }}%0A%0ADetails: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
